from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from layers.functions.cb_decoder import (
    decode_table,
    decode_group_subject,
    decode_subject,
)
from layers.functions.common import shuffle_words
from modules.words.data.data_retriever import get_words
from modules.words.keyboards.paginators import (
    create_group_subject_paginator,
    create_subject_paginator,
    create_word_paginator,
)

from modules.words.keyboards import inline, builders

router = Router()


@router.callback_query(F.data == "developers")
async def developers(callback: CallbackQuery):
    await callback.message.edit_text(
        "–•–µ–π üé≠ –æ—Å—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏ —Ü—å–æ–≥–æ –±–æ—Ç–∞)\n\n–ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è! ‚ò∫Ô∏è",
        reply_markup=inline.developers_kb,
    )


@router.callback_query(F.data == "bot_info")
async def send_bot_info(callback: CallbackQuery):
    await callback.message.edit_text(
        "–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω–∏–π –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤ –ø–æ —Ä—ñ–∑–Ω–∏–º —Ä—ñ–≤–Ω—è–º,"
        " –æ–∫—Ä–µ–º–∏–º —Ç–µ–º–∞–º —á–∏ –ø–æ —Ç–µ—Å—Ç–∞–º, —Ç–∞–∫—ñ —è–∫: IELTS",
        reply_markup=inline.back_kb,
    )


@router.callback_query(F.data == "back")
async def button_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        f"–î–∞–≤–∞–π –≤–∏–≤—á–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É —Ä–∞–∑–æ–º üá¨üáß\n\n"
        f"–¢–∏ –º–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ —Ç–µ–º–∞–º–∏, –∞–±–æ –≤–∏–≤—á–∞—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞ –Ω–∞ —Å–≤–æ—î–º—É —Ä—ñ–≤–Ω—ñ\n\n\n"
        f"Keep going! \n\n"
        f"‚¨áÔ∏è–û–±–µ—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –Ω–∏–∂—á–µ‚¨áÔ∏è\n",
        reply_markup=builders.greeting_kb(),
    )


@router.callback_query(F.data == "profile")
async def profile(callback: CallbackQuery) -> None:
    await callback.message.edit_text("–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å", reply_markup=inline.profile_kb)


@router.callback_query(F.data == "word_tables")
async def word_tables(callback: CallbackQuery):
    await callback.message.edit_text(
        "–°—É–ø–µ—Ä!ü•≥ \n\n–î–∞–≤–∞–π –æ–±–µ—Ä–µ–º–æ —Ä–æ–∑–¥—ñ–ª –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤üí´",
        reply_markup=builders.word_tables_kb(),
    )


@router.callback_query(F.data.startswith("group_subject:"))
async def group_subject(callback: CallbackQuery):
    table_name = callback.data.split(":")[1]
    paginator = await create_group_subject_paginator(table_name)
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=paginator())


@router.callback_query(F.data.startswith("subjects:"))
async def subjects(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    table_name = callback.data.split(":")[1]
    group_subject = callback.data.split(":")[2]
    paginator = await create_subject_paginator(table_name, group_subject)
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=paginator())


@router.callback_query(F.data.startswith("words:"))
async def words(callback: CallbackQuery, state: FSMContext):
    table_name = callback.data.split(":")[1]
    group_subject = callback.data.split(":")[2]
    subject = callback.data.split(":")[3]
    words, definitions = await get_words(
        decode_table(table_name),
        decode_group_subject(group_subject),
        decode_subject(subject),
    )
    words, definitions = shuffle_words(words, definitions)
    await state.update_data(words=words, definitions=definitions)
    paginator = await create_word_paginator(table_name, group_subject, subject, state)
    await callback.message.edit_text(
        f"{words[0]} - {definitions[0]}", reply_markup=paginator()
    )
