import asyncio
from contextlib import suppress

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from config import telegram_token, lock_path
import fasteners
import keyboards


bot = Bot(telegram_token, parse_mode='HTML')
dp = Dispatcher()

smiles = [
    ['‚öìÔ∏è', '–Ø–∫–æ—Ä—å –ø–æ–¥–Ω—è—Ç—å, –ø–∞—Ä—É—Å–∞ –æ–ø—É—Å—Ç–∏—Ç—å!'],
    ['üåΩ', '–≠—Ç–æ —á—Ç–æ, –æ—Ç—Å—ã–ª–∫–∞ –Ω–∞ –•—Ä—É—â–µ–≤–∞?'],
    ['ü¶à', '–ê–∫—É–ª–∞ –Ω–µ –∫–∞—Ä–∞—Å—å, —Å—Ç—Ä–∞—É—Å –Ω–µ –ø—Ç–∏—Ü–∞'],
    ['üèπ', '–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ —Ç—ã –Ω–∞ –º–∏–¥—É —Ä–∞–∑–¥–∞–ª']
]

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(f'Hello, {message.from_user.first_name}',
                         reply_markup=keyboards.main_kb)

@dp.callback_query(keyboards.Pagination.filter(F.action.in_(["prev", "next"])))
async def pagination_handler(call: CallbackQuery, callback_data: keyboards.Pagination):
    page_num = int(callback_data.page)
    page = page_num - 1 if page_num > 0 else 0

    if callback_data.action == "next":
        page = page_num + 1 if page_num < (len(smiles) - 1) else page_num

    with suppress(TelegramBadRequest):
        await call.message.edit_text(
            f"{smiles[page][0]} <b>{smiles[page][1]}</b>",
            reply_markup=keyboards.paginator(page)
        )
    await call.answer('—Ç—É—Ç —Ç–µ–∫—Å—Ç)')

@dp.message()
async def echo(message: Message):
    msg = message.text.lower()

    if msg == '—Å—Å—ã–ª–∫–∏':
        await message.answer('–í–æ—Ç –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏:', reply_markup=keyboards.linsk_kb)
    elif msg == '—Å–ø–µ—Ü –∫–Ω–æ–ø–∫–∏':
        await message.answer("–í–æ—Ç —Å–ø–µ—Ü –∫–Ω–æ–ø–∫–∏", reply_markup=keyboards.spec_kb)
    elif msg == '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:', reply_markup=keyboards.calc_kb())
    elif msg == '—Å–º–∞–π–ª–∏–∫–∏':
        await message.answer(f'{smiles[0][0]} <b>{smiles[0][1]}</b>', reply_markup=keyboards.paginator())# –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É —Ç–∞–º —Å—Ç–æ–∏—Ç 0



lock = fasteners.InterProcessLock(lock_path)
async def main():
    with lock:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)


if __name__ =='__main__':
    asyncio.run(main())