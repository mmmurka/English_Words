from unittest.mock import AsyncMock, patch

import pytest
from aiogram.fsm.context import FSMContext
from layers.functions.cb_encoder import encode_table
from modules.words.callbacks.f_data import send_bot_info, developers, button_back, word_tables, group_subject_fdata
from modules.words.keyboards import inline, builders
from modules.words.keyboards.paginators import create_group_subject_paginator


# –ü—Ä–∏–º–µ—Ä —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è CallbackQuery
@pytest.fixture
def callback():
    callback = AsyncMock()
    callback.message.edit_text = AsyncMock()
    return callback


# –ü—Ä–∏–º–µ—Ä —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è FSMContext
@pytest.fixture
def state():
    return AsyncMock(FSMContext)


@pytest.mark.asyncio
async def test_send_bot_info_handler(callback):
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await send_bot_info(callback)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ edit_text –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ reply_markup
    callback.message.edit_text.assert_called_with(
        "–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω–∏–π –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤ –ø–æ —Ä—ñ–∑–Ω–∏–º —Ä—ñ–≤–Ω—è–º,"
        " –æ–∫—Ä–µ–º–∏–º —Ç–µ–º–∞–º —á–∏ –ø–æ —Ç–µ—Å—Ç–∞–º, —Ç–∞–∫—ñ —è–∫: IELTS",
        reply_markup=inline.back_kb,
    )


@pytest.mark.asyncio
async def test_developers(callback):
    await developers(callback)
    callback.message.edit_text.assert_called_with(
        "–•–µ–π üé≠ –æ—Å—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏ —Ü—å–æ–≥–æ –±–æ—Ç–∞)\n\n–ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è! ‚ò∫Ô∏è",
        reply_markup=inline.developers_kb,
    )


@pytest.mark.asyncio
async def test_button_back(callback, state):
    await button_back(callback, state)
    state.clear.assert_called_once()
    callback.message.edit_text.assert_called_with(
        f"–î–∞–≤–∞–π –≤–∏–≤—á–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É —Ä–∞–∑–æ–º üá¨üáß\n\n"
        f"–¢–∏ –º–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ —Ç–µ–º–∞–º–∏, –∞–±–æ –≤–∏–≤—á–∞—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞ –Ω–∞ —Å–≤–æ—î–º—É —Ä—ñ–≤–Ω—ñ\n\n\n"
        f"Keep going! \n\n"
        f"‚¨áÔ∏è–û–±–µ—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –Ω–∏–∂—á–µ‚¨áÔ∏è\n",
        reply_markup=builders.greeting_kb(),
    )

@pytest.mark.asyncio
async def test_word_tables(callback):
    await word_tables(callback)
    callback.message.edit_text.assert_called_with(
        "–°—É–ø–µ—Ä!ü•≥ \n\n–î–∞–≤–∞–π –æ–±–µ—Ä–µ–º–æ —Ä–æ–∑–¥—ñ–ª –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤üí´",
        reply_markup=builders.word_tables_kb(),
    )


# @pytest.mark.asyncio
# async def test_group_subject_fdata(callback):
#     # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
#     encoded = encode_table('topic_vocabulary')  # –ü–æ–¥–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
#     callback.data = f'group_subject:{encoded}:2'
#     paginator = AsyncMock()
#
#     # –ò—Å–ø–æ–ª—å–∑—É–µ–º patch –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ create_group_subject_paginator
#     with patch('modules.words.keyboards.paginators.create_group_subject_paginator', return_value=paginator) as mock_paginator:
#         await group_subject_fdata(callback)
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
#         mock_paginator.assert_called_once_with(encoded)
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
#         paginator.assert_called_once_with(2)
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
#         callback.message.edit_text.assert_called_with("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=paginator(2))
