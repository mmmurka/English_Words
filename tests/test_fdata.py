import pytest
from layers.functions.common import shuffle_words
from layers.functions.cb_decoder import decode_table, decode_group_subject, decode_subject
from layers.functions.cb_encoder import encode_table, encode_group_subject, encode_subject
from modules.words.callbacks.f_data import (
    send_bot_info, developers, button_back, word_tables,
    group_subject_fdata, subjects_fdata, words_fdata
)
from modules.words.data.data_retriever import get_words
from modules.words.keyboards import inline, builders
from modules.words.keyboards.paginators import (
    create_group_subject_paginator, create_subject_paginator, create_word_paginator
)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤ callback.message.edit_text
def assert_edit_text_called_with(callback, expected_text, reply_markup):
    callback.message.edit_text.assert_called_with(expected_text, reply_markup=reply_markup)


@pytest.mark.asyncio
async def test_send_bot_info_handler(callback):
    await send_bot_info(callback)
    assert_edit_text_called_with(
        callback,
        "–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω–∏–π –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤ –ø–æ —Ä—ñ–∑–Ω–∏–º —Ä—ñ–≤–Ω—è–º, –æ–∫—Ä–µ–º–∏–º —Ç–µ–º–∞–º —á–∏ –ø–æ —Ç–µ—Å—Ç–∞–º, —Ç–∞–∫—ñ —è–∫: IELTS",
        reply_markup=inline.back_kb
    )


@pytest.mark.asyncio
async def test_developers(callback):
    await developers(callback)
    assert_edit_text_called_with(
        callback,
        "–•–µ–π üé≠ –æ—Å—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏ —Ü—å–æ–≥–æ –±–æ—Ç–∞)\n\n–ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è! ‚ò∫Ô∏è",
        reply_markup=inline.developers_kb
    )


@pytest.mark.asyncio
async def test_button_back(callback, state):
    await button_back(callback, state)
    state.clear.assert_called_once()
    assert_edit_text_called_with(
        callback,
        (
            "–î–∞–≤–∞–π –≤–∏–≤—á–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É —Ä–∞–∑–æ–º üá¨üáß\n\n"
            "–¢–∏ –º–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ —Ç–µ–º–∞–º–∏, –∞–±–æ –≤–∏–≤—á–∞—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞ –Ω–∞ —Å–≤–æ—î–º—É —Ä—ñ–≤–Ω—ñ\n\n\n"
            "Keep going! \n\n‚¨áÔ∏è–û–±–µ—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –Ω–∏–∂—á–µ‚¨áÔ∏è\n"
        ),
        reply_markup=builders.greeting_kb()
    )


@pytest.mark.asyncio
async def test_word_tables(callback):
    await word_tables(callback)
    assert_edit_text_called_with(
        callback,
        "–°—É–ø–µ—Ä!ü•≥ \n\n–î–∞–≤–∞–π –æ–±–µ—Ä–µ–º–æ —Ä–æ–∑–¥—ñ–ª –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤üí´",
        reply_markup=builders.word_tables_kb()
    )


@pytest.mark.asyncio
async def test_group_subject_fdata(callback):
    encoded_table = encode_table('topic_vocabulary')
    callback.data = f'group_subject:{encoded_table}:2'
    paginator = await create_group_subject_paginator(encoded_table)
    await group_subject_fdata(callback)
    assert_edit_text_called_with(callback, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=paginator(2))


@pytest.mark.asyncio
async def test_subjects_fdata(callback, state):
    encoded_table = encode_table('topic_vocabulary')
    encoded_group_subject = encode_group_subject('animals')
    callback.data = f'subjects:{encoded_table}:{encoded_group_subject}:0:0'
    paginator = await create_subject_paginator(encoded_table, encoded_group_subject, 0)
    await subjects_fdata(callback, state)

    state.clear.assert_called_once()
    assert_edit_text_called_with(callback, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=paginator(0))


@pytest.mark.asyncio
async def test_words_fdata(callback, state):
    encoded_table = encode_table('topic_vocabulary')
    encoded_group_subject = encode_group_subject('animals')
    encoded_subject = encode_subject('1 - large mammals')

    callback.data = f'words:{encoded_table}:{encoded_group_subject}:{encoded_subject}:0:0'
    paginator = await create_word_paginator(encoded_table, encoded_group_subject, encoded_subject, state, 0, 0)

    await words_fdata(callback, state)

    words, definitions = await get_words(
        decode_table(encoded_table),
        decode_group_subject(encoded_group_subject),
        decode_subject(encoded_subject)
    )
    words, definitions = shuffle_words(words, definitions)

    assert_edit_text_called_with(
        callback,
        f"{words[0]} - {definitions[0]}",
        reply_markup=paginator()
    )
