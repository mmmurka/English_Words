import asyncio
from contextlib import suppress

from aiogram import Router, F, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from Telegram.keyboards import fabrics, inline
from Telegram.keyboards.builders import topic_kb, theme_kb
from Telegram.translate.translateAPI import trans_text
from Telegram.utils.states import Form
from aiogram.utils.keyboard import InlineKeyboardBuilder
from Telegram.callbacks.topics import topic_from_table, theme_from_topic, words_from_theme, group_from_theme
from Telegram.keyboards.fabrics import create_paginator
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from typing import Any, Dict

from aiogram.filters import Command

router = Router()


@router.callback_query(F.data == "devs")
async def send_info_devs(callback: CallbackQuery):
    await callback.message.edit_text('–•–µ–π üé≠ –æ—Å—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏ —Ü—å–æ–≥–æ –±–æ—Ç–∞)\n\n–ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è! ‚ò∫Ô∏è',
                                     reply_markup=inline.linsk_kb)


@router.callback_query(F.data == "bot_info")
async def send_bot_info(callback: CallbackQuery):
    await callback.message.edit_text(
        '–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω–∏–π –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤ –ø–æ —Ä—ñ–∑–Ω–∏–º —Ä—ñ–≤–Ω—è–º, –æ–∫—Ä–µ–º–∏–º —Ç–µ–º–∞–º —á–∏ –ø–æ —Ç–µ—Å—Ç–∞–º, —Ç–∞–∫—ñ —è–∫: IELTS',
        reply_markup=inline.back_kb)


@router.callback_query(F.data == "back")
async def button_back(callback: CallbackQuery):
    await callback.message.edit_text(
        f'–î–∞–≤–∞–π –≤–∏–≤—á–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É —Ä–∞–∑–æ–º üá¨üáß\n\n'
        f'–¢–∏ –º–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ —Ç–µ–º–∞–º–∏, –∞–±–æ –≤–∏–≤—á–∞—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞ –Ω–∞ —Å–≤–æ—î–º—É —Ä—ñ–≤–Ω—ñ\n\n\n'
        f'Keep going! \n\n'
        f'‚¨áÔ∏è–û–±–µ—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –Ω–∏–∂—á–µ‚¨áÔ∏è\n',
        reply_markup=fabrics.greeting())


@router.callback_query(F.data == "topics")
async def topics(callback: CallbackQuery):
    await callback.message.edit_text('–°—É–ø–µ—Ä!ü•≥ \n\n–î–∞–≤–∞–π –æ–±–µ—Ä–µ–º–æ —Ä–æ–∑–¥—ñ–ª –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤üí´',
                                     reply_markup=inline.topics_kb)


@router.callback_query(F.data == "translate")
async def support(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Form.word)
    await callback.message.edit_text(
        '–ù–∞–ø–∏—à—ñ—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É ')


@router.callback_query(F.data.startswith('topic:'))
async def topic(callback: CallbackQuery, state: FSMContext):
    button_info = callback.data.split(':')
    table = button_info[1].split('_')
    topics_list = await topic_from_table(' '.join(table))
    keyboard = topic_kb(topics_list, '_'.join(table))
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)


@router.callback_query(F.data.startswith('theme:'))
async def theme(callback: CallbackQuery, state: FSMContext):
    button_info = callback.data.split(':')
    group_subject = button_info[2].split('_')
    table = button_info[1].split('_')
    themes_list = await theme_from_topic(' '.join(table), ' '.join(group_subject))
    keyboard = theme_kb(themes_list, '_'.join(table), '_'.join(group_subject))
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)


@router.callback_query(F.data.startswith('words:'))
async def words(callback: CallbackQuery, state: FSMContext):
    button_info = callback.data.split(':')
    table = button_info[1].split('_')
    theme = button_info[2].split('_')
    word_definition = await words_from_theme(' '.join(table), ' '.join(theme))
    group_subject = await group_from_theme(' '.join(table), ' '.join(theme))
    my_paginator = await create_paginator(button_info[1], button_info[2])
    await callback.message.edit_text(f'{word_definition[0]}', reply_markup=my_paginator(0))
